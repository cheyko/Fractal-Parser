package fractal.semantics;

import fractal.syntax.ASTDefine;
import fractal.syntax.ASTExpAdd;
import fractal.syntax.ASTExpDiv;
import fractal.syntax.ASTExpLit;
import fractal.syntax.ASTExpMod;
import fractal.syntax.ASTExpMul;
import fractal.syntax.ASTExpSub;
import fractal.syntax.ASTExpVar;
import fractal.syntax.ASTFracCompose;
import fractal.syntax.ASTFracInvocation;
import fractal.syntax.ASTFracSequence;
import fractal.syntax.ASTFracVar;
import fractal.syntax.ASTFractal;
import fractal.syntax.ASTRestoreStmt;
import fractal.syntax.ASTSaveStmt;
import fractal.syntax.ASTSelf;
import fractal.syntax.ASTRender;
import fractal.syntax.ASTStmtSequence;
import fractal.syntax.ASTTCmdBack;
import fractal.syntax.ASTTCmdClear;
import fractal.syntax.ASTTCmdForward;
import fractal.syntax.ASTTCmdHome;
import fractal.syntax.ASTTCmdLeft;
import fractal.syntax.ASTTCmdPenDown;
import fractal.syntax.ASTTCmdPenUp;
import fractal.syntax.ASTTCmdRight;
import fractal.syntax.ASTProgram;
import fractal.syntax.ASTRepeat;
import fractal.sys.FractalException;

/**
 * Interface Visitor. Visitor interface auto-generated by CS34Q semantic
 * generator. Created on Sat Oct 12 03:13:16 2013
 *
 * @param <S> The input type of visitor (i.e. the state or context given to each
 * node)
 * @param <T> The return type of the visitor
 */
public interface Visitor<S, T> {

    /**
     * Visit a Fractal program
     *
     * @param program The sequence to be visited
     * @param state The context within which the visit should be done
     * @return The combined result of visiting each statement of the sequence
     * @throws FractalException if the sequence is semantically inconsistent
     * with this visitor
     */
    public T visitFractalProgram(ASTProgram program, S state) throws FractalException;

    /**
     * Visit a sequence of statements
     *
     * @param seq The sequence to be visited
     * @param state The context within which the visit should be done
     * @return The combined result of visiting each statement of the sequence
     * @throws FractalException if the sequence is semantically inconsistent
     * with this visitor
     */
    public T visitASTStmtSequence(ASTStmtSequence seq, S state) throws FractalException;

    /**
     * Perform a SAVE operation
     *
     * @param form The save statement
     * @param state The current interpreter state
     * @return The result of visiting SAVE
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTSaveStmt(ASTSaveStmt form, S state) throws FractalException;

    /**
     * Perform a RESTORE operation
     *
     * @param form The restore statement
     * @param state The current interpreter state
     * @return The result of visiting RESTORE
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTRestoreStmt(ASTRestoreStmt form, S state) throws FractalException;

    /**
     * Render (draw) a fractal.
     *
     * @param form The RENDER statement
     * @param state The current interpreter state
     * @return The result of visiting RENDER
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTRender(ASTRender form, S state) throws FractalException;

    /**
     * Define a new fractal
     * 
     * @param form The DEF statement
     * @param state The current interpreter state
     * @return The result of visiting DEF
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTDefine(ASTDefine form, S state) throws FractalException;
    
    /**
     * Visit a REPEAT statement
     * @param form The repeat statement (with its count expression and body)
     * @param state The current visitor state
     * @return The result of visiting REPEAT
     * @throws FractalException if visiting this statement fails
     */
    public T visitASTRepeat(ASTRepeat form, S state) throws FractalException;

    /**
     * Visit a fractal invocation "internal" expression.  Note that fractal 
     * invocations cannot be generated by the user directly.  They are used 
     * to represent a "virtual" expression denoting that a fractal should be 
     * invoked in a context     
     * @param form The "virtual" expression that is being visited
     * @param state The context within which the visit is being performed.
     * @return The result of visiting the (dynamically generated) fractal 
     * invocation.
     * @throws fractal.sys.FractalException if visiting this statement fails.
     */
    public T visitASTFracInvocation(ASTFracInvocation form, S state) throws FractalException;

    /**
     * Create a new fractal by sequencing two together.
     * 
     * @param form The ! (fractal sequencing) expression
     * @param state The current interpreter state
     * @return The result of visiting !
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTFracSequence(ASTFracSequence form, S state) throws FractalException;

    /**
     * Create a new fractal by composing two together.
     * 
     * @param form The @ (fractal composition) expression
     * @param state The current interpreter state
     * @return The result of visiting @
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTFracCompose(ASTFracCompose form, S state) throws FractalException;

    /**
     * Lookup a fractal identifier.
     * 
     * @param form The (expected) fractal valued variable expression.
     * @param state The current interpreter state
     * @return The fractal result of visiting the variable
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTFracVar(ASTFracVar form, S state) throws FractalException;

    /**
     * Create a new fractal by defining its generator explicitly
     * 
     * @param form The FRACTAL ... END block of code
     * @param state The current interpreter state
     * @return The fractal described by the body in the given block
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTFractal(ASTFractal form, S state) throws FractalException;

    /**
     * Render the current fractal in an appropriate invocation
     * context, derived from the current invocation.
     * 
     * @param form The SELF statement
     * @param state The current interpreter state
     * @return The result of visiting a SELF statement
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTSelf(ASTSelf form, S state) throws FractalException;

    /**
     * Visit the command to turn the turtle left
     * 
     * @param form The LEFT statement
     * @param state The current interpreter state
     * @return The result of visiting a LEFT statement
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTTCmdLeft(ASTTCmdLeft form, S state) throws FractalException;

    /**
     * Visit the command to turn the turtle right
     * 
     * @param form The RIGHT statement
     * @param state The current interpreter state
     * @return The result of visiting a RIGHT statement
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTTCmdRight(ASTTCmdRight form, S state) throws FractalException;

    /**
     * Visit the command to move the turtle forward
     * 
     * @param form The FORWARD statement
     * @param state The current interpreter state
     * @return The result of visiting a FORWARD statement
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTTCmdForward(ASTTCmdForward form, S state) throws FractalException;

    /**
     * Visit the command to move the turtle backward
     * 
     * @param form The BACK statement
     * @param state The current interpreter state
     * @return The result of visiting a BACK statement
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTTCmdBack(ASTTCmdBack form, S state) throws FractalException;

    /**
     * Visit the command to set the turtle's pen down
     * 
     * @param form The PENDOWN statement
     * @param state The current interpreter state
     * @return The result of visiting a PENDOWN statement
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTTCmdPenDown(ASTTCmdPenDown form, S state) throws FractalException;

    /**
     * Visit the command to set the turtle's pen up (no lines will be drawn)
     * 
     * @param form The PENUP statement
     * @param state The current interpreter state
     * @return The result of visiting a PENUP statement
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTTCmdPenUp(ASTTCmdPenUp form, S state) throws FractalException;

    /**
     * Visit the command to clear the turtle's display
     * 
     * @param form The CLEAR statement
     * @param state The current interpreter state
     * @return The result of visiting a CLEAR statement
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTTCmdClear(ASTTCmdClear form, S state) throws FractalException;

    /**
     * Visit the command to reset the turtle to the origin, pointing eastwards
     * 
     * @param form The HOME statement
     * @param state The current interpreter state
     * @return The result of visiting a HOME statement
     * @throws FractalException if execution of this expression fails
     */
    public T visitASTTCmdHome(ASTTCmdHome form, S state) throws FractalException;

    /**
     * Reduce an expression of the form exp1 + exp2
     * 
     * @param form The expression
     * @param state The current visitor state
     * @return The result of visiting the expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpAdd(ASTExpAdd form, S state) throws FractalException;

    /**
     * Reduce an expression of the form exp1 - exp2
     * 
     * @param form The expression
     * @param state The current visitor state
     * @return The result of visiting the expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpSub(ASTExpSub form, S state) throws FractalException;

    /**
     * Reduce an expression of the form exp1 * exp2
     * 
     * @param form The expression
     * @param state The current visitor state
     * @return The result of visiting the expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpMul(ASTExpMul form, S state) throws FractalException;

    /**
     * Reduce an expression of the form exp1 / exp2
     * 
     * @param form The expression
     * @param state The current visitor state
     * @return The result of visiting the expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpDiv(ASTExpDiv form, S state) throws FractalException;

    /**
     * Reduce an expression of the form exp1 % exp2
     * 
     * @param form The expression
     * @param state The current visitor state
     * @return The result of visiting the expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpMod(ASTExpMod form, S state) throws FractalException;

    /**
     * Visit an expression that denotes a fixed constant.
     * 
     * @param form The literal expression
     * @param state The current visitor state
     * @return The result of visiting the constant expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpLit(ASTExpLit form, S state) throws FractalException;

    /**
     * Visit a numerically valued variable.
     * 
     * @param form The variable expression
     * @param state The current visitor state
     * @return The result of visiting the variable expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpVar(ASTExpVar form, S state) throws FractalException;

}
