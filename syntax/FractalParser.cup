package fractal.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fractal.values.FractalValue;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		FractalLexer lexer;

		public FractalParser(FractalLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Encountered token " + cur_token +
					": " + lexer.getText());
		}
	    :};

/* Terminals (tokens returned by the scanner). */
// keywords
terminal FRACTAL, END;

// special symbols
terminal LPAREN, RPAREN, LBRACE, RBRACE, COMMA;

// special symbols
terminal SELF, REPEAT, RENDER, SAVE, RESTORE, COMPOSE, SEQUENCE, DEFINE;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, ISGREATER, ISLESS, ASSIGN, COLON, OR, AND, NOT;
// turtle commands
terminal LEFT, RIGHT, FORWARD, BACK, PENUP, PENDOWN, HOME, CLEAR;

// terminals with values
terminal Integer INT;
terminal Double REAL;
terminal String ID;

/* Non terminals */
non terminal ASTDefine definition;
non terminal ASTSelf self;
non terminal ASTRepeat repeat;
non terminal ASTRender render;
non terminal ASTSaveStmt save;
non terminal ASTRestoreStmt restore;
non terminal ASTFracSequence sequence;
non terminal ASTFracCompose compose;
non terminal ASTFracVar fractvar;

/* Non terminals */
non terminal ASTProgram program;
non terminal ASTStmtSequence stmtList;
non terminal ASTStatement stmt;

non terminal ASTTurtleCmd turtleCmd;

non terminal ArrayList<ASTExp> expList;
non terminal ASTExp expression;
non terminal ASTExp term;
non terminal ASTExp factor;
non terminal FractalValue number;
non terminal ASTFracExp fract;
non terminal empty;


/* Grammar rules */

program ::= stmtList:l  {: RESULT = new ASTProgram(l); :};

stmtList ::= stmtList:l stmt:s {: RESULT = l.add(s); :} |
	     stmt:s {: RESULT = new ASTStmtSequence(s); :};

stmt ::= definition:d {: RESULT = d; :} |
		render:rd {: RESULT = rd; :} | // finish this
		repeat:rep {: RESULT = rep; :} |
		restore:rs {: RESULT = rs; :} |
		self:sl {: RESULT = sl; :} |
		save:sv {: RESULT = sv; :} |
	 turtleCmd:c {: RESULT = c; :}
	 ;
	 
save ::= SAVE {: RESULT = new ASTSaveStmt();
	      :};
	 
self ::=  //LPAREN factor:num RPAREN COLON stmtList:body SELF {: RESULT = new ASTSelf(num);
	      //FRACTAL LPAREN factor:num RPAREN COLON stmtList:body SELF stmtList:body2 END {: RESULT = new ASTSelf(num);
	      //:}; 
	      SELF {: RESULT = new ASTSelf(null);
	      //turtleCmd:c factor:num SELF {: RESULT = new ASTSelf(num);
	      :};

restore ::= RESTORE {:RESULT = new ASTRestoreStmt();
	      :};
	 
repeat ::= REPEAT LBRACE ID:v RBRACE factor:i COLON stmtList:body END
			{: RESULT = new ASTRepeat(v, i, body); :} ;

render ::= RENDER LBRACE expression:f RBRACE LPAREN expression:v RPAREN fract:param {: RESULT = new ASTRender(f, v, param);
		:}|
		RENDER LPAREN expression:v RPAREN fract:param {: RESULT = new ASTRender(null, v, param);
		:}|
		RENDER LPAREN expression:v RPAREN fractvar:aFract {: RESULT = new ASTRender(null, v, aFract);
		:};
		
		
definition ::=	 DEFINE ID:fracname fract:param{:
		   RESULT = new ASTDefine(fracname, param);
		:};	 
		
fract ::= FRACTAL LBRACE number:param RBRACE COLON stmtList:body END{:
			RESULT = new ASTFractal(body.getSeq());
		:}|
			FRACTAL LPAREN number:param RPAREN COLON stmtList:body END{:
			RESULT = new ASTFractal(body.getSeq());
		:};	
		
turtleCmd ::= LEFT expression:e {:
	      	   RESULT = new ASTTCmdLeft(e);
	      :} |
	      RIGHT expression:e {:
	      	   RESULT = new ASTTCmdRight(e);
	      :}|
	      FORWARD expression:e {:
	      	   RESULT = new ASTTCmdForward(e);
	      :}|
	      BACK expression:e {:
	      	   RESULT = new ASTTCmdBack(e);
	      :}|
	      PENUP expression:e {:
	      	   RESULT = new ASTTCmdPenUp();
	      :}|
	      PENDOWN expression:e {:
	      	   RESULT = new ASTTCmdPenDown();
	      :}|
	      CLEAR expression:e {:
	      	   RESULT = new ASTTCmdClear();
	      :}|
	      HOME expression:e {:
	      	   RESULT = new ASTTCmdHome();
	      :}
	      // Add the remaining turtle commands
	      ;

expList ::= expList:l COMMA expression:e {: l.add(e); RESULT = l; :} |
	    expression:e {: ArrayList<ASTExp> list = new ArrayList<ASTExp>();
	    		    list.add(e);
			    RESULT = list;
			 :};

expression ::= 	expression:e PLUS term:t {:
			RESULT = new ASTExpAdd(e, t); :} |
		expression:e MINUS term:t {:
			RESULT = new ASTExpSub(e, t); :} |
		term:t {: RESULT = t; :};

term ::= term:t MUL factor:f {:
		RESULT = new ASTExpMul(t, f); :} |
	 term:t DIV factor:f {:
		RESULT = new ASTExpDiv(t, f); :} |
	 term:t MOD factor:f {:
		RESULT = new ASTExpMod(t, f); :} |
	 factor:f {: RESULT = f; :};

factor ::= number:ilit {: RESULT = new ASTExpLit(ilit); :} |
           ID:v {: RESULT = new ASTExpVar(v); :} |
	   LPAREN expression:e RPAREN {: RESULT = e; :}	;

number ::= INT:i {: RESULT = FractalValue.make(i); :} |
           REAL:r {: RESULT = FractalValue.make(r); :} ;

empty ::= ;
